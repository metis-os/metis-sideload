#!/usr/bin/env bash

networkError() {
  clear
  echo -e "Couldnot connect to the internet.\nCheck your Internet Connection and please try again.\nExitting...\nReport any problem, bug, and errors to https://github.com/metis-os/reports/issues"
  exit 1
}

failed() {
  clear
  echo -e "Something went wrong.\nThe command could not be executed correctly!\nPlease try again.\nExitting...\nReport any problem, bug, and errors to https://github.com/metis-os/reports/issues"
  exit 1
}

installationError() {
  clear
  echo -e "Something went wrong.\nAll the packages couldn't be installed correctly!\nPlease try again.\nExitting...\nReport any problem, bug, and errors to https://github.com/metis-os/reports/issues"
  exit 1
}

configError() {
  clear
  echo "Checking configs in new system..."
  if ! ls /mnt/config  &> /dev/null; then 
    echo -e "Reuired config files couldn't be copied to new system. Installation failed!\nAborting...\nReport any problem, bug, and errors to https://github.com/metis-os/reports/issues"
    exit 1
  else
    ls /mnt/config
    echo "All good..."
  fi
}

ignoreableErrors() {
  clear
  echo -e "Something went wrong.\nThe command was not executed correctly!\nThe error can be negleted as it doesn't affect our installation.\nContinuing the installation...\nReport any problem, bug, and errors to https://github.com/metis-os/reports/issues"
}

updateMirrors() {
  clear
  if ! which rankmirrors &> /dev/null; then 
    echo -e "rankmirrors command not found\nCouldn't update the repository mirrorlists\nContinuing without updating mirrors have got chances of installation failure..."
  else
    echo -e "\nUpdating latest and fastest mirrorlists to download packages faster.\nBe patient, this may take some time upto few minutes..."
#    rankmirrors -n 20 /etc/pacman.d/mirrorlist > /etc/pacman.d/mirrorlist.new
#   mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak || ignoreableErrors
#    mv /etc/pacman.d/mirrorlist.new /etc/pacman.d/mirrorlist || failed
    echo "Mirrorlists updated..."
  fi
}

checkingConnection() {
  clear
  echo "Checking internet connection..."
  ping -q  -c1 metislinux.org || networkError
  echo  "Cool! Internet Connection Available. Getting ready for installation..."
}

settingFont() {
  clear
  echo "Setting bigger font for better readability..." 
  setfont ter-v22b || ignoreableErrors
}

displayArt(){
  clear
  echo -ne "
  __________________________________________________________________________________________________________
  |                                                                                                         |
  |                       +-+-+-+-+-+        +-+-+-+-+-+        +-+-+-+-+-+-+-+-+-+                         |
  |                       |M|a|g|i|c|        |M|e|t|i|s|        |I|n|s|t|a|l|l|e|r|                         |
  |                       +-+-+-+-+-+        +-+-+-+-+-+        +-+-+-+-+-+-+-+-+-+                         |
  |                                                                                                         |
  |---------------------------------------------------------------------------------------------------------|
  |                                 Official Cli installer for metis linux.                                 |
  |---------------------------------------------------------------------------------------------------------|
  |                                 Install Metis Linux in few clicks                                       |
  |               Check: https://github.com/metis-os for details or visit https://metislinux.org            |
  |---------------------------------------------------------------------------------------------------------|
  |_________________________________________________________________________________________________________|
  "
  echo "Press any key to start the installation process"
  read -r nothing
}

selectDrive() {
  lsblk
  echo "Enter the drive to install metis linux on it."
  echo "Enter Drive (eg. sda or vda or nvme0n1): "
  read -r drive
}

checkDrive() {
  while ! lsblk | grep "$drive"  &> /dev/null
  do
    clear
    echo -e "$drive is not found. Check your available disks and try again..."
    selectDrive
  done
}

selectRoot() {
  lsblk
  echo "Enter the root partition (eg: sda1 or nvme0n1p2 or vda4): "
  read -r rootpartition
}

checkRoot() {
  while ! lsblk | grep "$rootpartition"  &> /dev/null
  do
    clear
    echo -e "$rootpartition is not found. Check your available partitions and try again..."
    selectRoot
  done
}

selectHome() {
  lsblk
  echo "Enter the home partition (eg: sda1 or nvme0n1p2 or vda4): "
  read -r homepartition
}

checkHome() {
  while ! lsblk | grep "$homepartition"  &> /dev/null
  do
    clear
    echo -e "$homepartition partition is not found. Check your available partitions and try again..."
    selectHome
  done
}

selectSwap() {
  lsblk
  echo "Enter swap partition (eg: sda3, nvme0n1p1or vda3): "
  read -r swappartition
}

checkSwap() {
  while ! lsblk | grep "$swappartition"  &> /dev/null
  do
    clear
    echo -e "$swappartition partition is not found. Check your available partitions and try again..."
    selectSwap
  done
}

diskPartition(){
  clear
  echo -ne "
  ------------------------------------------------------------------------
          THIS WILL FORMAT AND DELETE ALL DATA ON THE DISK
        Please make sure you know what you are doing because
      after formating your disk there is no way to get data back
  ------------------------------------------------------------------------
  "
  selectDrive
  checkDrive
  clear
  lsblk
  echo "Choose a familier disk utility tool to partition your drive! [Default=cfdisk]: "
  echo " 1. fdisk"
  echo " 2. cfdisk"
  echo " 3. gdisk"
  echo " 4. parted"
  read -r partitionutility

  case "$partitionutility" in
    1 | fdisk | Fdisk | FDISK)
    partitionutility="fdisk"
    ;;
    2 | cfdisk | Cfdisk | CFDISK)
    partitionutility="cfdisk"
    ;;
    3 | gdisk | Gdisk | GDISK)
    partitionutility="gdisk"
    ;;
    4 | parted | Parted | PARTED)
    partitionutility="parted"
    ;;
    *)
    echo "Unknown or unsupported disk utility! Default = cfdisk."
    partitionutility="cfdisk"
    ;;
  esac
  echo "$partitionutility is the selected disk utility tool for partition."
  echo "Getting ready for creating partitions!"
  clear
  echo "boot partition is mandatory for uefi systems. Skip it for legacy systems"
  echo "root partition is mandatory."
  echo "home and swap partitions are optional but recommended!"
  echo "Also, you can create a separate partition for timeshift backup (optional)!"
  echo "Getting ready in 15 seconds"
  "$partitionutility" /dev/"$drive"
  clear
  lsblk
  echo " 1. ext4"
  echo " 2. xfs"
  echo " 3. btrfs (only for uefi systems. leagacy system doesnot support btrfs)"
  echo " 4. f2fs"
  echo " Boot partition will be formatted later in fat32 file system (for uefi systems only)."
  echo "Choose your linux file system type for formatting drives [default=ext4]: "
  read -r filesystemtype

  case "$filesystemtype" in
    1 | ext4 | Ext4 | EXT4)
    filesystemtype="ext4"
    ;;
    2 | xfs | Xfs | XFS)
    filesystemtype="xfs"
    ;;
    3 | btrfs | Btrfs | BTRFS)
      if [[ ! -d "/sys/firmware/efi" ]]; then
        echo "Legacy system detected..."
        echo "btrfs file system unsupported in legacy systems!"
        echo "Using default = ext4"
        filesystemtype="ext4"
      else
        filesystemtype="btrfs"
      fi
    ;;
    4 | f2fs | F2fs | F2FS)
    filesystemtype="f2fs"
    ;;
    *)
    echo "Unknown or unsupported Filesystem. Default = ext4."
    filesystemtype="ext4"
    ;;
  esac
  echo "$filesystemtype is the selected file system type."
  echo "Getting ready for formatting drives."
  sleep 3s
  selectRoot
  checkRoot
  mkfs."$filesystemtype" /dev/"$rootpartition"
  mount /dev/"$rootpartition" /mnt
  if mountpoint /mnt = "/mnt is not a mountpoint"; then
    clear
    echo -e "$rootpartition is not mounted successfully. Aborting installation!\nInstallation failed..."
    exit 1
  else
    echo "Cool $rootpartition mounted at /mnt"
  fi

  clear
  lsblk
  echo "Did you create a separate home partition? [y/n]: " 
  read -r answerhome
  case "$answerhome" in
    y | Y | yes | Yes | YES)
    selectHome
    checkHome
    mkfs."$filesystemtype" /dev/"$homepartition"
    mkdir /mnt/home
    mount /dev/"$homepartition" /mnt/home
    if mountpoint /mnt/home = "/mnt/home is not a mountpoint"; then
      clear
      echo -e "$homepartition is not mounted successfully. Aborting installation!\nInstallation failed..."
      exit 1
    else
      echo "Cool $homepartition mounted at /mnt/home"
    fi
    ;;
    *)
    echo "Skipping home partition!"
    ;;
  esac
  clear
  lsblk
  echo  "Did you create a separate swap partition? [y/n]: "
  read -r answerswap
  case "$answerswap" in
    y | Y | yes | Yes | YES)
    selectSwap
    checkSwap
    mkswap /dev/"$swappartition"
    swapon /dev/"$swappartition"
    ;;
    *)
    echo "Skipping Swap partition!"
    ;;
  esac
  lsblk
}

installingBase() {
  basestrap /mnt base base-devel runit elogind-runit
}

baseCompleted() {
  s=0
  for ((i=1;i<=5;i++)); do
    if ! installingBase; then
      ((s++))
      if ((s==5)); then
        echo "Base installation failed..."
        installationError
      fi
        echo "Base installation failed. Retrying..."
      else {
        echo "Base installation successful..."
        break
      }
    fi
  done
}

installingKernel() {
  basestrap /mnt linux-zen linux-firmware linux-zen-headers
}

kernelCompleted() {
  s=0
  for ((i=1;i<=5;i++)); do
    if ! installingKernel; then
      ((s++))
      if ((s==5)); then
        echo "Kernel installation failed..."
        installationError
      fi
        echo "Kernel installation failed. Retrying..."
      else {
        echo "Kernel installation successful..."
        break
      }
    fi
  done
}

generatingFstab() {
  clear
  echo "generating fstab file"
  fstabgen -U /mnt > /mnt/etc/fstab || failed
  echo "Checking Fstab Contents..."
  cat /mnt/etc/fstab
}

copyingConfig() {
  clear
  echo "Copying config files to new system..."
  cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist || ignoreableErrors
  cp /etc/pacman.d/metis-mirrorlist /mnt/etc/pacman.d/metis-mirrorlist || failed
  cp /etc/pacman.conf /mnt/etc/pacman.conf || failed
  mv /usr/local/config/post_install.sh /mnt/ || failed
  cp -r /usr/local/config /mnt
  configError
}

firstphaseCompleted(){
  clear
  echo "First Phase Completed!"
  echo "Entering into Second Phase of Installation..."
  echo "Run the following commands to start second phase..."
  echo "1. metis-chroot /mnt"
  echo "2. ./post_install.sh"
}

displayArt
settingFont
checkingConnection
updateMirrors
diskPartition
baseCompleted
kernelCompleted
generatingFstab
copyingConfig
firstphaseCompleted
